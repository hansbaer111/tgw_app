rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow update: if isOwner(userId) && request.resource.data.keys().hasOnly(['displayName', 'equipment']);
      allow create: if request.auth.uid != null;
    }

    // KORRIGIERTE REGELN HIER:
    match /workout_logs/{logId} {
      // Erlaube das Lesen/Löschen einzelner Dokumente wie zuvor
      allow get, delete: if isOwner(resource.data.userId) || isAdmin();
      // Erlaube das Auflisten (Listenabfragen), ABER NUR, wenn nach der eigenen userId gefiltert wird
      allow list: if isOwner(request.query.filters[0].value) || isAdmin();
      
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isOwner(resource.data.userId) || isAdmin();
    }

    match /client_plans/{planId} {
      // Erlaube das Lesen einzelner Dokumente
      allow get: if isOwner(resource.data.userId) || isAdmin();
      // Erlaube das Auflisten, ABER NUR, wenn nach der eigenen userId gefiltert wird
      allow list: if isOwner(request.query.filters[0].value) || isAdmin();

      allow write: if isAdmin();
    }

    // Diese Regeln sind wahrscheinlich in Ordnung, da sie nicht nach userId filtern
    match /workout_templates/{templateId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
    }

    match /admin_attributes/{docId} {
      allow read: if request.auth.uid != null;
      allow write: if isAdmin();
    }

    match /exercises/{exerciseId} {
      allow read: if request.auth.uid != null;
      allow create: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.canCreateExercises == true && isOwner(request.resource.data.ownerId);
      allow update, delete: if isAdmin() || isOwner(resource.data.ownerId);
    }
    
    // ... (Regeln für Conversations bleiben gleich) ...
    match /conversations/{convoId} {
      // Allow read/write if the user is one of the participants
      allow read, write: if request.auth != null && (convoId.matches("$(request.auth.uid)_.*") || convoId.matches(".*_$(request.auth.uid)"));

      // Allow admin to read/write any conversation
      allow read, write: if request.auth != null && isAdmin();

      match /messages/{messageId} {
        // Allow read/write if the user is a participant in the parent conversation
        allow read, write: if request.auth != null && get(/databases/$(database)/documents/conversations/$(convoId)).data.participantIds.hasAny([request.auth.uid]);

        // Allow admin to read/write any message
        allow read, write: if request.auth != null && isAdmin();
      }
    }
  }
}
